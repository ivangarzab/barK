# .github/workflows/unit-tests.yml
name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

# Required permissions for test result publishing
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew

      - name: Run Common Unit Tests
        run: ./gradlew shared:testDebugUnitTest --continue

      - name: Run Android Unit Tests
        run: ./gradlew sample-android:testDebugUnitTest --continue

      - name: Generate Test Coverage Report
        run: ./gradlew shared:jacocoTestReport

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: test-results
          path: |
            **/build/test-results/**/*.xml
            **/build/reports/tests/**
          retention-days: 30

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            **/build/reports/tests/**
          retention-days: 30

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            shared/build/reports/jacoco/jacocoTestReport/html/
            shared/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          retention-days: 30

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/build/test-results/**/*.xml
          check_name: "Unit Test Results"
          comment_title: "Unit Test Results"
          fail_on: "test failures"

      - name: Comment PR with Test Results
        uses: dorny/test-reporter@v1
        if: always() && github.event_name == 'pull_request'
        with:
          name: 'Unit Tests'
          path: '**/build/test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: true

  # iOS tests
  ios-tests:
    name: Run iOS Unit Tests
    runs-on: macos-latest
    if: false # TODO: Enable when iOS tests are ready

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew

      - name: Run iOS Unit Tests
        run: ./gradlew shared:iosSimulatorArm64Test

      - name: Upload iOS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results
          path: |
            **/build/test-results/**/*.xml
          retention-days: 30

  # Test summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()

    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage-reports

      - name: Test Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          TEST_FILES=$(find test-results -name "*.xml" | wc -l)
          echo "- **Test result files found:** $TEST_FILES" >> $GITHUB_STEP_SUMMARY
          
          # Basic test counting (could be enhanced)
          if [ $TEST_FILES -gt 0 ]; then
            echo "- **Status:** Tests executed successfully ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** No test results found ❌" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          # Extract coverage percentage from XML report if it exists
          if [ -f "coverage-reports/jacocoTestReport.xml" ]; then
            COVERAGE=$(grep -o 'type="LINE".*covered="[0-9]*".*missed="[0-9]*"' coverage-reports/jacocoTestReport.xml | head -1 | sed 's/.*covered="\([0-9]*\)".*missed="\([0-9]*\)".*/\1 \2/')
            if [ ! -z "$COVERAGE" ]; then
              COVERED=$(echo $COVERAGE | cut -d' ' -f1)
              MISSED=$(echo $COVERAGE | cut -d' ' -f2)
              TOTAL=$((COVERED + MISSED))
              if [ $TOTAL -gt 0 ]; then
                PERCENTAGE=$((COVERED * 100 / TOTAL))
                echo "- **Line Coverage:** ${PERCENTAGE}% (${COVERED}/${TOTAL} lines)" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **Line Coverage:** No coverage data available" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Line Coverage:** Could not parse coverage data" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Line Coverage:** Report not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **HTML Report:** Available in coverage-reports artifact" >> $GITHUB_STEP_SUMMARY
          echo "- **Baseline Established:** Use this percentage to set future thresholds" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Test artifacts uploaded for 30 days**" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Check the 'Publish Test Results' action for detailed results**" >> $GITHUB_STEP_SUMMARY